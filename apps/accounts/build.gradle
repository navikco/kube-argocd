//buildscript {
//
//    ext {
//        springBootVersion = '2.2.6.RELEASE'
//        springBootAdminVersion = '2.2.2'
//        springCloudVersion = '2.2.2.RELEASE'
//        springCloudKubernetesVersion = "1.1.2.RELEASE"
//
//        kubeBuildNumber = 12
//        buildTime = new Date().format("yyyy-MM-dd HH:mm:ss")
//        gitTagName = project.version
//    }
//
//    println "BuildNumber >>> " + kubeBuildNumber
//    println "BuildTime >>> " + buildTime
//
//    repositories {
//
//        mavenLocal()
//        mavenCentral()
//
//        maven {
//
//            url "http://repository.jboss.org/nexus/content/groups/public/"
//        }
//        maven {
//
//            url "http://repo.spring.io/milestone/"
//        }
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//        maven {
//
//            url "http://www.datanucleus.org/downloads/maven2/"
//        }
//        maven {
//
//            url "http://repo.spring.io/libs-milestone/"
//        }
//        maven {
//
//            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
//        }
//        maven {
//
//            url 'https://repo.adobe.com/nexus/content/repositories/public/'
//        }
//    }
//    dependencies {
//
//        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
//        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
//        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0"
//        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0"
//        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.6"
//    }
//}

plugins {

    id "com.google.cloud.tools.jib" version '2.6.0'
    id "java"
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
    id "com.palantir.git-version" version "0.12.3"
    id 'org.asciidoctor.convert' version '1.5.6'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: "org.springframework.boot"

    apply plugin: com.google.cloud.tools.jib.gradle.JibPlugin
    apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin
    apply plugin: org.asciidoctor.gradle.AsciidoctorPlugin
    apply plugin: com.gorylenko.GitPropertiesPlugin
    apply plugin: com.palantir.gradle.gitversion.GitVersionPlugin

    tasks.jib.dependsOn tasks.build
    jib {

        from.image = "registry://fabric8/java-alpine-openjdk8-jre"

        extraDirectories {
            paths {
                path {
                    // copies the contents of 'src/main/another/dir' into '/extras' on the container
                    from = file('/workspace/source/apps/accounts/build/libs/')
                    into = '/app/'
                }
                path {
                    // copies the contents of 'src/main/another/dir' into '/extras' on the container
                    from = file('/workspace/source/apps/accounts/build/resources/main/logback/')
                    into = '/app/'
                }
            }
        }

//        dockerClient.executable = "/usr/local/bin/docker"
//        container.mainClass = "WebAppKt"
//        java -Dserver.port=8080 -DKUBE_ADMIN_HOST=${KUBE_ADMIN_HOST} -DKUBE_ADMIN_PORT=${KUBE_ADMIN_PORT} -DKUBE_PROFILE=${ENVIRONMENT} -Dspring.profiles.active=${ENVIRONMENT} -Dserver.ssl.enabled=false -jar ${MICROSERVICE}-*.jar
//        extraDirectories.paths = bootJar.destinationDir
//        container.entrypoint = "java -Dserver.port=8080 -DKUBE_ADMIN_HOST=localhost -DKUBE_ADMIN_PORT=8080 -DKUBE_PROFILE=green -Dspring.profiles.active=green -Dserver.ssl.enabled=false -jar /app/libs/" + bootJar.archiveName
//        container.entrypoint = ["sleep", "120"]
        container.user = "kubeadmin:kube"
        container.entrypoint = ["java", "-Dserver.port=8080", "-DKUBE_ADMIN_HOST=${3}", "-DKUBE_ADMIN_PORT=${4}", "-DKUBE_PROFILE=${1}", "-Dspring.profiles.active=${1}", "-Dserver.ssl.enabled=false", "-jar", "${bootJar.archiveName}"]
//        container.entrypoint = ['java', '-Dserver.port=8080', '-DKUBE_ADMIN_HOST=${KUBE_ADMIN_HOST}', '-DKUBE_ADMIN_PORT=${KUBE_ADMIN_PORT}', '-DKUBE_PROFILE=${ENVIRONMENT}', '-Dspring.profiles.active=${ENVIRONMENT}', '-Dserver.ssl.enabled=false', '-jar', bootJar.archiveName]
    }

    String kubeBuildNumber = 12
    String buildTime = new Date().format("yyyy-MM-dd HH:mm:ss")
    String gitTagName = project.version

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    springBoot {

        buildInfo {
            properties {
                additional = [
                        'KubeBuildNumber': kubeBuildNumber,
                        'BuildTime'      : buildTime
                ]
            }
        }
    }


    println "|||GIT State||| :-> $project.name"
    println "<<<"
    println "\tProject Name :-> $project.name"
    println "\tProject Version :-> $project.version"
    println "\tBuild No# :-> " + kubeBuildNumber
    println "\tNEW GIT <<<TAG Name>>> :-> " + gitTagName
    println ">>>"

    println "CALLER@Gradle@buildNumber >>> " + kubeBuildNumber
    println "CALLER@Gradle@BuildTime >>> " + buildTime
    println "CALLER@Gradle@GitTagName >>> " + gitTagName

    repositories {

        mavenLocal()
        mavenCentral()
        jcenter()

        maven {

            url "http://repository.jboss.org/nexus/content/groups/public/"
        }
        maven {

            url "https://repo.spring.io/milestone/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {

            url "http://www.datanucleus.org/downloads/maven2/"
        }
        maven {

            url "https://repo.spring.io/libs-milestone/"
        }
        maven {

            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
        }
        maven {

            url 'https://repo.adobe.com/nexus/content/repositories/public/'
        }
    }

    dependencies {

        compile group: 'org.json', name: 'json', version: '20190722'

        compileOnly 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.projectlombok:lombok:1.18.10'


        compile("org.springframework.boot:spring-boot-starter-web:2.3.2.RELEASE")

        compile("org.springframework.boot:spring-boot-starter-security:2.3.2.RELEASE")
        compile("org.springframework.boot:spring-boot-starter-actuator:2.3.2.RELEASE")

        compile group: 'org.springframework.cloud', name: 'spring-cloud-commons', version: "2.2.2.RELEASE"
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-kubernetes-all', version: "1.1.2.RELEASE"
        runtime group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: 'Hoxton.RELEASE', ext: 'pom'

        compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
        compile('org.glassfish.jersey.core:jersey-client')
        compile('org.jolokia:jolokia-core')

        //compile group: "com.h2database", name: "h2"
        compile('org.apache.commons:commons-lang3')
        compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.10.1'
        compile('org.hibernate.validator:hibernate-validator')
        compile('javax.validation:validation-api')

        testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("junit:junit:4.12")
        testCompile group: 'org.springframework', name: 'spring-test', version: '5.1.8.RELEASE'
    }

    test {
        systemProperties System.properties
    }

    String restDoc = null
    if (project.hasProperty("restDocRoot")) {

        restDoc = restDocRoot
    }
    println "|||asciidoc.gradle@restDocRoot||| :-> $restDoc"

    String snippets = null
    if (project.hasProperty("snippetsDir")) {

        snippets = snippetsDir
    }
    println "|||asciidoc.gradle@snippetsDir||| :-> $snippets"

    String restDocOutputDir = null
    if (project.hasProperty("outDir")) {

        restDocOutputDir = outDir
    }
    println "|||asciidoc.gradle@outDir||| :-> $restDocOutputDir"

    ext {

        snippets = file("$buildDir/generated-snippets")
        restDocOutputDir = file("$buildDir/asciidoc")
    }

    test {
        outputs.dir snippets
        systemProperties System.properties
    }

    bootJar {

        println "JAR : RestDocRoot :-> $restDocRoot"
        println "JAR : Base Name :-> " + baseName
        println "JAR : Project Name :-> $project.name"
        println "JAR : Project Version :-> $project.version"
        println "JAR : OutDir :-> $buildDir/asciidoc"

        dependsOn asciidoctor

        from("$buildDir/asciidoc/html5") {

            into "static/kube/$restDocRoot/info"
        }
    }

    asciidoctor {

        if (!project.name.equalsIgnoreCase("repository")) {

            println "ASCII-Doc : SnippetsDir :-> " + snippets
            println "ASCII-Doc : BuildDir :-> $buildDir"
            println "ASCII-Doc : OutDir :-> " + restDocOutputDir
            println "ASCII-Doc : RestDocRoot :-> $restDoc"
            println "ASCII-Doc : ProjectName :-> $project.name"
//        println "ASCII-Doc : BuildNumber ::: >>> " + project.kubeBuildNumber
            println "ASCII-Doc : BuildTime ::: >>> " + buildTime
            println "ASCII-Doc : GitTAG ::: >>> " + gitTagName
        }

        attributes 'snippets': snippets
        inputs.dir snippets
        outputDir restDocOutputDir
        dependsOn test
        sourceDir 'src/main/asciidoc'

        doLast {

            def props = new Properties()
            def propertyFile = file "build/resources/main/git.properties"
            props.load(new FileReader(propertyFile))
            props.setProperty("git.tag", gitTagName)

            def writer = new FileWriter(propertyFile)
            try {
                props.store(writer, 'Newly appended contents')
                writer.flush()
            } finally {
                writer.close()
            }
        }
    }
}